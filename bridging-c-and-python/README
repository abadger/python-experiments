I needed Python bindings for https://github.com/libpwquality/libpwquality that I could install via
pip.  This started me down the path of looking at ctypes and cffi to see how those two could be used
to write bindings for a C library.

The files here are not intended as complete implementations of libpwquality bindings but to get a
sense of how bindings written using the Python C-API, ctypes, and cffi compare to each other.

Files
=====

* pwquality.h: The current version of the libpwquality header file.  This is used as a data file for
  defining constants in the ctypes and cffi (ABI mode) bindings.  In production code, we'd want to
  find this on the system at build time and store the information into a python file which could be
  imported.
* test_libpwquality.py:  pytest test suite to check that the cffi and ctypes bindings are compatible
  with the upstream, extension module bindings.  ``pytest -v`` will check that the check and
  generate functions do the same things as the upstream bindings do


All the alternate bindings
--------------------------
These bindings cover PWQError, creating a PWQSettings object, and the generate and check methods.
They copy API of the upstream pwquality bindings, meaning that PWQSettings is a context class with
generate and check methods rather than the C-style of having functions which take the Settings as
the first argument.

* pwquality.c:  The current version of the bindings extracted from the upstream source.  This would
  be built with the python distutils command for building extension modules.  It's here as a
  baseline for comparing the ctypes and cffi code.
* ctypes_pwq.py: Bindings written in ctypes.  This dynamically gives python access to the C
  functions.
* cffi_api_gen_pwq.py: Bindings written in the cffi api-out-of-line mode.  This generates c code,
  compiles it, and then imports the newly compiled extension module to talk to the library while
  providing a Pythonic API on top of those functions.
* cffi_abi_gen_pwq.py: Bindings written in the cffi abi-out-of-line mode.  This generates a python
  module and then imports the newly created module to talk to the library while providing a Pythonic
  API on top of those functions.  The Python bindings created here can be used in a way that's
  nearly identical to the cffi api-out-of-line mode.
* cffi_abi_pwq.py: Bindings written in the cffi abi-in-line mode.  This does not require write
  access to the disk but it generates the bindings every single the module is loaded in a new
  process.
